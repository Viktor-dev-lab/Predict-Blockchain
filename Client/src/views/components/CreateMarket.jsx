import { useState, useEffect } from "react";
import { ethers } from "ethers";
import "../../assets/css/CreateMarket.css";

export function CreateMarket() {
  const [marketData, setMarketData] = useState({
    name: "",
    description: "",
    category: "",
    options: ["",""],
    endTime: "",
    validationSource: "",
    startingLiquidity: "",
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [account, setAccount] = useState(null);
  const [walletBalance, setWalletBalance] = useState("0");

  // K·∫øt n·ªëi v√≠
  const connectWallet = async () => {
    try {
        if (!window.ethereum) throw new Error("Vui l√≤ng c√†i ƒë·∫∑t MetaMask!");

        const provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send("eth_requestAccounts", []); // üõ† Y√™u c·∫ßu quy·ªÅn truy c·∫≠p MetaMask
        const signer = provider.getSigner();
        const address = await signer.getAddress();

        setAccount(address);
        await getWalletBalance(provider, address);
    } catch (err) {
        setError(err.message);
    }
  };

  // L·∫•y v√≠
  const getWalletBalance = async (provider, address) => {
    try {
      const balance = await provider.getBalance(address);
      setWalletBalance(ethers.utils.formatEther(balance));
    } catch (err) {
      setError(`Kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞ v√≠. ${err}`);
    }
  };

  useEffect(() => {
    if (account) {
      (async () => {
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        await getWalletBalance(provider, account);
      })();
    }
  }, [account]);

  // X·ª≠ l√≠ validate khi submit v√† post data
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      if (!marketData.name || !marketData.description || !marketData.category) {
        throw new Error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      }
      if (marketData.options.some((opt) => opt.trim() === "")) {
        throw new Error("M·ªói th·ªã tr∆∞·ªùng ph·∫£i c√≥ √≠t nh·∫•t 2 l·ª±a ch·ªçn!");
      }
      if (!marketData.validationSource) {
        throw new Error("C·∫ßn nh·∫≠p ngu·ªìn x√°c th·ª±c!");
      }
      if (!marketData.startingLiquidity || isNaN(marketData.startingLiquidity)) {
        throw new Error("S·ªë d∆∞ kh·ªüi t·∫°o ph·∫£i l√† s·ªë h·ª£p l·ªá!");
      }

      // G·ª≠i d·ªØ li·ªáu t·ªõi backend th√¥ng qua API call
      const response = await fetch("http://localhost:5000/api/create-market", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(marketData),
      });

      if (!response.ok) {
        throw new Error("C√≥ l·ªói x·∫£y ra khi g·ª≠i d·ªØ li·ªáu l√™n server!");
      }


      // Sau khi g·ª≠i th√†nh c√¥ng, reset l·∫°i form

      setMarketData({
        name: "",
        description: "",
        category: "",
        options: ["", ""],
        endTime: "",
        validationSource: "",
        startingLiquidity: "",
      });
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="create-market-container">
      <div className="market-form-container">
        <h2 className="title">üöÄ T·∫°o Th·ªã Tr∆∞·ªùng D·ª± ƒêo√°n</h2>
        {error && <div className="error-message">{error}</div>}

        <form className="market-form" onSubmit={handleSubmit}>

          {/* name ti√™u ƒë·ªÅ */}
          <div className="form-group">
            <label>T√™n th·ªã tr∆∞·ªùng</label>
            <input
              type="text"
              placeholder="Nh·∫≠p t√™n th·ªã tr∆∞·ªùng"
              value={marketData.name}
              onChange={(e) => setMarketData({ ...marketData, name: e.target.value })}
              required
            />
          </div>

          {/* description ti√™u ƒë·ªÅ */}
          <div className="form-group">
            <label>M√¥ t·∫£</label>
            <textarea
              placeholder="M√¥ t·∫£ th·ªã tr∆∞·ªùng..."
              value={marketData.description}
              onChange={(e) => setMarketData({ ...marketData, description: e.target.value })}
              required
            />
          </div>

          {/*Danh m·ª•c */}
          <div className="form-group">
            <label>Danh m·ª•c</label>
            <select
              value={marketData.category}
              onChange={(e) => setMarketData({ ...marketData, category: e.target.value })}
              required
            >
              <option value="" disabled>Ch·ªçn danh m·ª•c</option>
              <option value="Sports">Sport</option>
              <option value="Crypto">Crypto</option>
              <option value="Politics">Politics</option>
            </select>
          </div>


          <div className="form-group">
            <label>Th·ªùi gian k·∫øt th√∫c</label>
            <input
              type="datetime-local"
              value={marketData.endTime}
              onChange={(e) => setMarketData({ ...marketData, endTime: e.target.value })}
              required
            />
          </div>

          <div className="form-group">
            <label>üîç Ngu·ªìn x√°c th·ª±c</label>
            <input
              type="text"
              placeholder="URL ngu·ªìn d·ªØ li·ªáu x√°c th·ª±c"
              value={marketData.validationSource}
              onChange={(e) => setMarketData({ ...marketData, validationSource: e.target.value })}
              required
            />
          </div>

          <div className="form-group">
            <label>üí∞ S·ªë d∆∞ kh·ªüi t·∫°o</label>
            <input
              type="number"
              placeholder="Nh·∫≠p s·ªë d∆∞ BTB"
              value={marketData.startingLiquidity}
              onChange={(e) => setMarketData({ ...marketData, startingLiquidity: e.target.value })}
              required
            />
          </div>

          <div className="form-group">
            <label>L·ª±a ch·ªçn</label>
            {marketData.options.map((option, index) => (
              <input
                key={index}
                type="text"
                placeholder={`L·ª±a ch·ªçn ${index + 1}`}
                value={option}
                onChange={(e) => {
                  const newOptions = [...marketData.options];
                  newOptions[index] = e.target.value;
                  setMarketData({ ...marketData, options: newOptions });
                }}
                required
              />
            ))}
            <button
              type="button"
              className="add-option-btn"
              onClick={() => setMarketData({ ...marketData, options: [...marketData.options, ""] })}
            >
              ‚ûï Th√™m l·ª±a ch·ªçn
            </button>
          </div>

          <button
            type="submit"
            className="submit-btn"
            disabled={loading}
          >
            {loading ? "‚è≥ ƒêang t·∫°o..." : "üöÄ T·∫°o Th·ªã Tr∆∞·ªùng"}
          </button>

        </form>
      </div>

      <div className="wallet-info">
        <h3>üí≥ V√≠ c·ªßa b·∫°n</h3>
        {account ? (
          <p className="wallet-address">ƒê√£ k·∫øt n·ªëi</p>
        ) : (
          <button className="connect-wallet-btn" onClick={connectWallet}>
            üîó K·∫øt n·ªëi v√≠
          </button>
        )}
        <p>S·ªë d∆∞: <strong>{walletBalance} BTB</strong></p>
      </div>
    </div>
  );
}

export default CreateMarket;
